name: Integration-test

on:
  workflow_call:
    inputs:
      task-name:
        description: 'Name of the gradle task to run'
        required: true
        type: string

      run-group:
        description: 'Name of the github runner'
        required: true
        type: string

      database-port:
        description: 'Database port number'
        required: true
        type: number

    secrets:
      VRPACKAGETOKEN:
        required: true

jobs:
  integration-test:
    runs-on: 
      group: ${{ inputs.run-group }}
    steps:
      - name: Clone VRFramework
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRFramework
          path: VRFramework
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRFramework Branch"
        run: |
          cd VRFramework
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;
      
      - name: Clone VRNFe
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRNFe
          path: VRNFe
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRNFe Branch"
        run: |
          cd VRNFe
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;

      - name: Clone VRWorkflow
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRWorkflow
          path: VRWorkflow
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRWorkflow Branch"
        run: |
          cd VRWorkflow
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;

      - name: Clone VRCore
        uses: actions/checkout@v3
        with:
          path: VRCore
          fetch-depth: 0

      - name: delete vr.properties
        run: sudo rm -rf /vr

      - name: Creating vr.properties
        run: |
          sudo mkdir -p /vr
          sudo chown -R $USER /vr
          touch /vr/vr.properties
          echo "database.ip=localhost" >> /vr/vr.properties
          echo "database.porta=${{ inputs.database-port }}" >> /vr/vr.properties
          echo "database.nome=vr" >> /vr/vr.properties
          echo "database.usuario=postgres" >> /vr/vr.properties
          echo "database.senha=VrPost@Server" >> /vr/vr.properties
          echo "system.numeroloja=1" >> /vr/vr.properties
          
          cat /vr/vr.properties

      - name: Creating folder to backup
        run: |
          sudo rm -rf /db
          sudo mkdir /db
          sleep 5

      - name: Download backup
        id:  download-backup
        uses: actions/cache/restore@v4
        with:
          path: ./db/updated_database.bak
          key: database-${{ github.run_number }}${{ github.run_attempt }}

      - name: Run Docker Container from vrsoftbr/postgres
        run: |
          sleep 10
          docker run -P --name bancovr${{ inputs.database-port }} -p ${{ inputs.database-port }}:5432 -d vrsoftbr/postgres
      
      - name: Restore Backup
        run: |
          sleep 10
          docker cp ./db/updated_database.bak bancovr${{ inputs.database-port }}:/tmp/database.bkp
          docker exec bancovr${{ inputs.database-port }} restore_db

      - name: restore Gradle-cache 
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: |
            ~/.gradle/
            ./VRCore/.gradle
            ./VRFramework/.gradle
            ./VRNFe/.gradle
            ~/.m2/
          key: gradle-${{ github.run_number }}${{ github.run_attempt }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8
 
      - name: executing ${{ inputs.task-name }}
        run: |
          cd VRCore && ./gradlew ${{ inputs.task-name }} -x VRNFe:integrationTest
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.VRPACKAGETOKEN }}

      - name: 'Integration Test report'
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ inputs.task-name }}Report
          path: VRCore/build/reports/tests/${{ inputs.task-name }}
          retention-days: 2
    
      - name: Shutdown container
        run: |
          docker stop bancovr${{ inputs.database-port }}
          docker rm -f bancovr${{ inputs.database-port }}